{"version":3,"sources":["logo.svg","App.js","index.js","serviceWorker.js"],"names":["module","exports","App","file","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","register","then","registration","console","log","publicKey","subscribeOptions","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","pushManager","subscribe","pushSubscription","JSON","stringify","subscribeUserToPush","subscription","body","uniqueid","Date","getTime","res","catch","err","base64String","base64","repeat","length","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,8KCyB5BC,ICRgBC,EDQhBD,EArBf,WACE,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBEAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DDcN,GA1BAC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SA0B7C,kBAAmBC,WAAa,gBAAiBR,OAAQ,EAf9BT,EAkBP,UAjBfiB,UAAUC,cAAcC,SAASnB,IAiBPoB,MAAK,SAAUC,GAG9C,OAFAC,QAAQC,IAAI,2CAfhB,SAA6BF,EAAcG,GACzC,IAAMC,EAAmB,CACvBC,iBAAiB,EACjBC,qBAAsBC,EAAsBJ,IAE9C,OAAOH,EAAaQ,YAAYC,UAAUL,GAAkBL,MAAK,SAAUW,GAEzE,OADAT,QAAQC,IAAI,8BAA+BS,KAAKC,UAAUF,IACnDA,KAUAG,CAAoBb,EALb,8FAMbD,MAAK,SAAUe,GAChB,IAAIC,EAAO,CAACD,aAAcA,GAE1BC,EAAKC,UAAW,IAAIC,MAAOC,UAC3BjB,QAAQC,IAAI,WAAYa,EAAKC,aAG5BjB,MAAK,SAAUoB,GAChBlB,QAAQC,IAAIiB,MACXC,OAAM,SAAUC,GACjBpB,QAAQC,IAAImB,MAIhB,SAASd,EAAsBe,GAS7B,IARA,IACMC,GAAUD,EADA,IAAIE,QAAQ,EAAIF,EAAaG,OAAS,GAAK,IAExDC,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEXC,EAAUvC,OAAOwC,KAAKL,GACtBM,EAAc,IAAIC,WAAWH,EAAQF,QAElCM,EAAI,EAAGA,EAAIJ,EAAQF,SAAUM,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,GAEtC,OAAOF,K","file":"static/js/main.0355d7f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n/* serviceWorker.register({\n  onSuccess: (ff) => {\n    console.log(ff);\n  }\n}); */\n\nfunction registerServiceWorker(file) {\n  return navigator.serviceWorker.register(file);\n}\n\nfunction subscribeUserToPush(registration, publicKey) {\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicKey)\n  }; \n  return registration.pushManager.subscribe(subscribeOptions).then(function (pushSubscription) {\n    console.log('Received PushSubscription: ', JSON.stringify(pushSubscription));\n    return pushSubscription;\n  });\n}\n\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n  var publicKey = 'BAG9h6VT03TwRvK_G9l7FHhBzGRZPd7-zQ2LU3aeeUAdnkGC-Po86QNZZSuMSKHIZRfmwxj7cqnHrfVfgHL9PMc';\n  // 注册service worker\n  registerServiceWorker('./sw.js').then(function (registration) {\n    console.log('Service Worker 注册成功');\n    // 开启该客户端的消息推送订阅功能\n    return subscribeUserToPush(registration, publicKey);\n  }).then(function (subscription) {\n    var body = {subscription: subscription};\n    // 为了方便之后的推送，为每个客户端简单生成一个标识\n    body.uniqueid = new Date().getTime();\n    console.log('uniqueid', body.uniqueid);\n    // 将生成的客户端订阅信息存储在自己的服务器上\n    // return sendSubscriptionToServer(JSON.stringify(body));\n  }).then(function (res) {\n    console.log(res);\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      console.log(swUrl);\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}