function drawSolidCircle(e,t,n,r,o){e.fillStyle=t,e.beginPath(),e.arc(n,r,o,0,2*Math.PI,!0),e.closePath(),e.fill()}function drawHollowCircle(e,t,n,r,o){e.strokeStyle=t,e.beginPath(),e.arc(n,r,o,0,2*Math.PI,!0),e.closePath(),e.stroke()}function distance(e,t){let n=t.x-e.x,r=t.y-e.y;return Math.sqrt(n*n+r*r)}function drawLine(e,t,n,r,o,i){e.strokeStyle=t,e.beginPath(),e.moveTo(n,r),e.lineTo(o,i),e.stroke(),e.closePath()}function getCanvasPoint(e,t,n){let r=e.getBoundingClientRect();return{x:2*(t-r.left),y:2*(n-r.top)}}const defaultOptions={container:null,focusColor:"#e06555",fgColor:"#d6dae5",bgColor:"#fff",n:3,innerRadius:20,outerRadius:50,touchRadius:70,render:!0,customStyle:!1,minPoints:4};export class Recorder{static get ERR_NOT_ENOUFH_POINTS(){return"not enough points"}static get ERR_USER_CANCELED(){return"user canceled"}static get ERR_NO_TASK(){return"no task"}constructor(e){e=Object.assign({},defaultOptions,e),this.options=e,this.path=[],this.options.render&&this.render()}render(){if(this.circleCanvas)return!1;let e=this.options,t=e.container||document.createElement("div");e.container||e.customStyle||(Object.assign(t.style,{position:"absolute",top:0,left:0,width:"100%",height:"100%",lineHeight:"100%",overflow:"hidden",backgroundColor:e.bgColor}),document.body.appendChild(t)),this.container=t;let{width:n,height:r}=t.getBoundingClientRect(),o=document.createElement("canvas");o.width=o.height=2*Math.min(n,r),e.customStyle||Object.assign(o.style,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%) scale(0.5)"});let i=o.cloneNode(!0),s=o.cloneNode(!0);return t.appendChild(i),t.appendChild(s),t.appendChild(o),this.lineCanvas=i,this.moveCanvas=s,this.circleCanvas=o,this.container.addEventListener("touchmove",(e=>e.preventDefault()),{passive:!1}),this.clearPath(),!0}clearPath(){this.circleCanvas||this.render();let{circleCanvas:e,lineCanvas:t,moveCanvas:n}=this,r=e.getContext("2d"),o=t.getContext("2d"),i=n.getContext("2d"),s=e.width,{n:c,fgColor:l,innerRadius:a}=this.options;r.clearRect(0,0,s,s),o.clearRect(0,0,s,s),i.clearRect(0,0,s,s);let d=Math.round(s/(c+1)),h=[];for(let e=1;e<=c;e++)for(let t=1;t<=c;t++){let n=d*e,o=d*t;drawSolidCircle(r,l,o,n,a);let i={x:o,y:n};i.pos=[e,t],h.push(i)}this.circles=h}async cancel(){return this.recordingTask?this.recordingTask.cancel():Promise.resolve({err:new Error(Recorder.ERR_NO_TASK)})}async record(){if(this.recordingTask)return this.recordingTask.promise;let{circleCanvas:e,lineCanvas:t,moveCanvas:n,options:r}=this,o=e.getContext("2d"),i=t.getContext("2d"),s=n.getContext("2d");e.addEventListener("touchstart",(()=>{this.clearPath()}));let c=[],l=e=>{let{clientX:t,clientY:l}=e.changedTouches[0],{bgColor:a,focusColor:d,innerRadius:h,outerRadius:u,touchRadius:g}=r,v=getCanvasPoint(n,t,l);for(let e=0;e<this.circles.length;e++){let t=this.circles[e],r=t.x,l=t.y;if(distance(t,v)<g){if(drawSolidCircle(o,a,r,l,u),drawSolidCircle(o,d,r,l,h),drawHollowCircle(o,d,r,l,u),c.length){let e=c[c.length-1],t=e.x,n=e.y;drawLine(i,d,r,l,t,n)}let t=this.circles.splice(e,1);c.push(t[0]);break}if(c.length){let e=c[c.length-1],t=e.x,r=e.y,o=v.x,i=v.y;s.clearRect(0,0,n.width,n.height),drawLine(s,d,t,r,o,i)}}};e.addEventListener("touchstart",l),e.addEventListener("touchmove",l);let a={},d=new Promise(((t,o)=>{a.cancel=(n={})=>{let r=this.recordingTask.promise;return n.err=n.err||new Error(Recorder.ERR_USER_CANCELED),e.removeEventListener("touchstart",l),e.removeEventListener("touchmove",l),document.removeEventListener("touchend",i),t(n),this.recordingTask=null,r};let i=o=>{if(s.clearRect(0,0,n.width,n.height),!c.length)return;e.removeEventListener("touchstart",l),e.removeEventListener("touchmove",l),document.removeEventListener("touchend",i);let a=null;c.length<r.minPoints&&(a=new Error(Recorder.ERR_NOT_ENOUGH_POINTS));let d={err:a,records:c.map((e=>e.pos.join(""))).join("")};t(d),this.recordingTask=null};document.addEventListener("touchend",i)}));return a.promise=d,this.recordingTask=a,d}}const recorder=new Recorder({container:document.querySelector("#locker")});recorder.record().then((e=>{console.log(e)}));